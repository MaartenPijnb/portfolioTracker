@page "/"

@using Microsoft.EntityFrameworkCore
@using System.Globalization

@inject HttpClient Http

<PageTitle>Portfolio Tracker</PageTitle>

<h1>Portfolio Tracker - Beta 0.1</h1>

<h3>Huidig portfolio:</h3>
@if (isLoadedComplete)
{
    
<div class="container">
        <div class="row">
            <div class="col-sm-4">
                <RadzenChart>
                    <RadzenDonutSeries Data="@piePortfolioItems" CategoryProperty="SymbolName" ValueProperty="Percentage">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Portfolio</div> 
                                <div>distribution</div>
                            </div>
                        </TitleTemplate>
                              <TooltipTemplate Context="data">
                        <p>
                         @data.Name <br />
                         @decimal.Round(data.Percentage,2) %
                        </p>
                    </TooltipTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
            </div>
            <div class="col-sm-4">
                <RadzenChart>
                    <RadzenDonutSeries Data="@assetTypePortfolioItems" CategoryProperty="Name" ValueProperty="Percentage">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Asset</div> 
                                <div>distribution</div>
                            </div>
                        </TitleTemplate>
                              <TooltipTemplate Context="data">
                        <p>
                         @data.Name <br />
                         @decimal.Round(data.Percentage,2) %
                        </p>
                    </TooltipTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
            </div>
            <div class="col-sm-4">
                <RadzenChart>
                    <RadzenDonutSeries Data="@profitsPortfolioItems" CategoryProperty="Name" ValueProperty="Percentage">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Profit</div> 
                                <div>distribution</div>
                            </div>
                        </TitleTemplate>
                              <TooltipTemplate Context="data">
                        <p>
                         @data.Name <br />
                         @decimal.Round(data.Percentage,2) %
                        </p>
                    </TooltipTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
            </div>
        </div>
    </div>
}
else{
    <p>Loading...</p>
}

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@portfolios" TItem="Portfolio" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" >
    <Columns>

        @*<RadzenDataGridColumn TItem="Employee" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="60px" >
            <Template Context="data">
            <RadzenImage Path="@data.Photo" style="width: 40px; height: 40px; border-radius: 8px;" />
            </Template>
            </RadzenDataGridColumn>*@
        <RadzenDataGridColumn TItem="Portfolio" Property="Asset.Name" Title="Asset" Width="400px" />
        <RadzenDataGridColumn TItem="Portfolio" Property="TotalValue" Title="Huidige waarde" />
        <RadzenDataGridColumn TItem="Portfolio" Property="Profit" Title="Winst / Verlies" />
        <RadzenDataGridColumn TItem="Portfolio" Property="ProfitPercentage" Title="%" />
    </Columns>
</RadzenDataGrid>

<h3>Portfolio history:</h3>

    <div class="row">
        <div class="col-md-3 p-3">
            <RadzenCard class="rz-card-portfoliohistory"> 
                <h4 class="mb-3">Total value</h4>
               <p>€ @totalValue</p>
            </RadzenCard>
        </div>
        <div class="col-md-3 p-3">
            <RadzenCard class="rz-card-portfoliohistory"> 
                <h4 class="mb-3">Profit</h4>
                <p>€ @totalCosts </p>
            </RadzenCard>
        </div>
        <div class="col-md-3 p-3">
            <RadzenCard class="rz-card-portfoliohistory"> 
                <h4 class="mb-3">Total transaction costs</h4>
              <p>€ 10</p>
            </RadzenCard>
        </div>
             <div class="col-md-3 p-3">
            <RadzenCard class="rz-card-portfoliohistory"> 
                <h4 class="mb-3">Total percentage</h4>
              <p>100%</p>
            </RadzenCard>
        </div>
    </div>

<div class="container my-5">
    <div class="row">
        <div class="col-md-11 flex-align-right">
             <RadzenButton class="margin-right-small" Click="() =>FilterPortfolioHistory( DateTime.Now.AddYears(-20))" Text="Max" ButtonStyle="ButtonStyle.Info" />
             <RadzenButton class="margin-right-small" Click="() =>FilterPortfolioHistory( DateTime.Now.AddYears(-1))" Text="Year" ButtonStyle="ButtonStyle.Info" />
             <RadzenButton class="margin-right-small" Click="() =>FilterPortfolioHistory( new DateTime(DateTime.Now.Year, 1,1))" Text="YTD" ButtonStyle="ButtonStyle.Info" />
             <RadzenButton class="margin-right-small" Click="() =>FilterPortfolioHistory(DateTime.Now.AddMonths(-1))" Text="Month" ButtonStyle="ButtonStyle.Info" />

            </div>
            </div>
    <div class="row">
        <div class="col">
            
            
            <RadzenChart>
                <RadzenAreaSeries Smooth="true" Data="@totalInvestedValue" CategoryProperty="Date" Title="Total Invested" ValueProperty="Revenue" RenderingOrder="1">
                    <TooltipTemplate Context="data">
                        <p>
                            <h6>@data.Date.ToString("dd MMM yyyy")</h6>
                            Total invested: @data.Revenue € 
                            <br>
                            Total profit: @data.Profit €
                        </p>
                    </TooltipTemplate>
                </RadzenAreaSeries>
                <RadzenAreaSeries Smooth="true" Data="@totalPortfolioValue" CategoryProperty="Date" Title="Total Value" ValueProperty="Revenue">
                    <TooltipTemplate Context="data">
                        <p>
                            <h6>@data.Date.ToString("dd MMM yyyy")</h6>
                            Total portfolio value: @data.Revenue €
                             <br>   
                            Total Profit: @data.Profit €
                        </p>
                    </TooltipTemplate>
                </RadzenAreaSeries>

                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM yyyy}" />
                <RadzenValueAxis Formatter="@FormatAsEuro">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Revenue in Euro" />
                </RadzenValueAxis>
            </RadzenChart>

        </div>
    </div>
</div>
@code {
    IEnumerable<Portfolio> portfolios;
    IEnumerable<PortfolioHistory> portfoliohistories;
    List<DataItem> totalInvestedValue, totalPortfolioValue;
    List<PiePortfolioItem> piePortfolioItems, assetTypePortfolioItems = new(), profitsPortfolioItems = new();
    decimal totalValue, profit, totalCosts, percentage;
    bool isLoadedComplete = false;

    protected override async Task OnInitializedAsync()
    {

        profitsPortfolioItems.Add(new PiePortfolioItem
            {
                Name = "Total Invested",                
                Percentage = 95
            });

        profitsPortfolioItems.Add(new PiePortfolioItem
            {
                Name = "Total Profit",                
                Percentage = 5
            });


        portfolios = await Http.GetFromJsonAsync<IEnumerable<Portfolio>>("Portfolio");
        portfoliohistories = await Http.GetFromJsonAsync<IEnumerable<PortfolioHistory>>("Portfolio/PortfolioHistory");
        totalValue = portfolios.Sum(x => x.TotalValue);
        totalCosts = 10;


        piePortfolioItems = portfolios.Select(x => new PiePortfolioItem
            {
                Name = x.Asset.Name,
                SymbolName = x.Asset.SymbolForApi,
                Percentage = x.TotalValue / totalValue * 100
            }).ToList();

        var portfoliosGroupedByType = portfolios.ToList().GroupBy(x => x.Asset.AssetType).ToList();

        foreach (var portfolioGroupedByType in portfoliosGroupedByType)
        {
            assetTypePortfolioItems.Add(
                new PiePortfolioItem
                    {
                        Name = portfolioGroupedByType.First().Asset.AssetType.ToString(),
                        Percentage = portfolioGroupedByType.Sum(x => x.TotalValue) / totalValue * 100
                    });
        }      

        FilterPortfolioHistory(DateTime.Now.AddYears(-20));
        isLoadedComplete = true;
    }

    bool smooth = true;
    class DataItem
    {
        public DateTime Date { get; set; }
        public double Revenue { get; set; }
        public double Profit { get; set; }
    }

    class PiePortfolioItem
    {
        public string SymbolName { get; set; }
        public string Name { get; set; }
        public decimal Percentage { get; set; }
    }

    string FormatAsEuro(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("nl-NL"));
    }
    void btnTest() { }

    void FilterPortfolioHistory(DateTime filterDate)
    {
        totalInvestedValue = portfoliohistories.Where(x=>x.Date >= filterDate).Select(x => new DataItem
            {
                Date = x.Date,
                Revenue = Convert.ToDouble(x.TotalInvestedPortfolioValue),
                Profit = Convert.ToDouble(x.Profit)
            }).ToList();

        totalPortfolioValue = portfoliohistories.Where(x=>x.Date >= filterDate).Select(x => new DataItem
            {
                Date = x.Date,
                Revenue = Convert.ToDouble(x.TotalPortfolioValue),
                Profit = Convert.ToDouble(x.Profit)

            }).ToList();  
    }

      void OnClick(string buttonName)
    {
        // do nothing
    }

}