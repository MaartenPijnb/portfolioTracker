@page "/"

@using Microsoft.EntityFrameworkCore
@using System.Globalization
@using PortfolioTracker.Client.Components

@inject HttpClient Http

<PageTitle>Portfolio Tracker</PageTitle>

<h1>Portfolio Tracker - Beta 0.1</h1>

<h3>Huidig portfolio:</h3>
@if (isLoadedComplete)
{

    <div class="container">
        <div class="row">
            <div class="col-sm-4">
                <RadzenChart>
                    <RadzenDonutSeries Data="@piePortfolioItems" CategoryProperty="SymbolName" ValueProperty="Percentage">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Portfolio</div>
                                <div>distribution</div>
                            </div>
                        </TitleTemplate>
                        <TooltipTemplate Context="data">
                            <p>
                                @data.Name <br />
                                @decimal.Round(data.Percentage,2) %
                            </p>
                        </TooltipTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
            </div>
            <div class="col-sm-4">
                <RadzenChart>
                    <RadzenDonutSeries Data="@assetTypePortfolioItems" CategoryProperty="Name" ValueProperty="Percentage">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Asset</div>
                                <div>distribution</div>
                            </div>
                        </TitleTemplate>
                        <TooltipTemplate Context="data">
                            <p>
                                @data.Name <br />
                                @decimal.Round(data.Percentage,2) %
                            </p>
                        </TooltipTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
            </div>
            <div class="col-sm-4">
                <RadzenChart>
                    <RadzenDonutSeries Data="@profitsPortfolioItems" CategoryProperty="Name" ValueProperty="Percentage">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Profit</div>
                                <div>distribution</div>
                            </div>
                        </TitleTemplate>
                        <TooltipTemplate Context="data">
                            <p>
                                @data.Name <br />
                                @decimal.Round(data.Percentage,2) %
                            </p>
                        </TooltipTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
            </div>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

<RadzenDataGrid AllowColumnResize="true" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@portfolios" TItem="Portfolio">
    <Columns>

        <RadzenDataGridColumn MinWidth="300px" Width="50%" TItem="Portfolio" Property="Asset.Name" Title="Asset" />
        <RadzenDataGridColumn MinWidth="150px" Width="12%" TItem="Portfolio" Title="Huidige waarde">
            <Template Context="data">
                <FormatCurrencyComponent CurrencyToDisplay=@data.TotalInvestedValue />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn MinWidth="150px" Width="12%" TItem="Portfolio" Title="Winst / Verlies">
            <Template Context="data">
                <FormatCurrencyComponent CurrencyToDisplay=@data.Profit />
            </Template>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn MinWidth="100px" Width="10%" TItem="Portfolio" Title="Profit">
            <Template Context="data">
                @data.ProfitPercentage %
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn MinWidth="100px" Width="16%" TItem="Portfolio" Title="Portfolio weight">
            <Template Context="data">
                @decimal.Round(data.TotalValue / totalValue * 100, 2)%
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<h3>Portfolio history:</h3>

<div class="row">
    <div class="col-md-3 p-3">
        <RadzenCard class="rz-card-portfoliohistory">
            <h4 class="mb-3">Total value</h4>
            <p>€ @totalValue.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR"))</p>
        </RadzenCard>
    </div>
    <div class="col-md-3 p-3">
        <RadzenCard class="rz-card-portfoliohistory">
            <h4 class="mb-3">Profit</h4>
            <p>€ @profit.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR"))  </p>
        </RadzenCard>
    </div>
    <div class="col-md-3 p-3">
        <RadzenCard class="rz-card-portfoliohistory">
            <h4 class="mb-3">Transaction Costs</h4>
            <p>€ @totalTransactionCosts.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR"))  </p>
        </RadzenCard>
    </div>
    <div class="col-md-3 p-3">
        <RadzenCard class="rz-card-portfoliohistory">
            <h4 class="mb-3">Taxes</h4>
            <p>€ @totalTaxesCosts.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR"))</p>
        </RadzenCard>
    </div>
</div>

<div class="container my-5">
    <div class="row">
        <div class="col-md-11 flex-align-right">
            <RadzenButton class="margin-right-small" Click="() =>FilterPortfolioHistory( DateTime.Now.AddYears(-20))" Text="Max" ButtonStyle="ButtonStyle.Info" />
            <RadzenButton class="margin-right-small" Click="() =>FilterPortfolioHistory( DateTime.Now.AddYears(-1))" Text="Year" ButtonStyle="ButtonStyle.Info" />
            <RadzenButton class="margin-right-small" Click="() =>FilterPortfolioHistory( new DateTime(DateTime.Now.Year, 1,1))" Text="YTD" ButtonStyle="ButtonStyle.Info" />
            <RadzenButton class="margin-right-small" Click="() =>FilterPortfolioHistory(DateTime.Now.AddMonths(-1))" Text="Month" ButtonStyle="ButtonStyle.Info" />

        </div>
    </div>
    <div class="row">
        <div class="col">


            <RadzenChart>
                <RadzenAreaSeries Smooth="true" Data="@totalInvestedValue" CategoryProperty="Date" Title="Total Invested" ValueProperty="Revenue" RenderingOrder="1">
                    <TooltipTemplate Context="data">
                        <p>
                            <h6>@data.Date.ToString("dd MMM yyyy")</h6>
                            Total invested: € @data.Revenue.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR"))
                            <br>
                            Total profit: € @data.Profit.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR"))
                        </p>
                    </TooltipTemplate>
                </RadzenAreaSeries>
                <RadzenAreaSeries Smooth="true" Data="@totalPortfolioValue" CategoryProperty="Date" Title="Total Value" ValueProperty="Revenue">
                    <TooltipTemplate Context="data">
                        <p>
                            <h6>@data.Date.ToString("dd MMM yyyy")</h6>
                            Total portfolio value: € @data.Revenue.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR"))
                            <br>
                            Total Profit: € @data.Profit.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR"))
                        </p>
                    </TooltipTemplate>
                </RadzenAreaSeries>

                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM yyyy}" />
                <RadzenValueAxis Formatter="@FormatAsEuro">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Revenue in Euro" />
                </RadzenValueAxis>
            </RadzenChart>

        </div>
    </div>
</div>
@code {
    IEnumerable<Portfolio> portfolios;
    IEnumerable<PortfolioHistory> portfoliohistories;
    List<DataItem> totalInvestedValue, totalPortfolioValue;
    List<PiePortfolioItem> piePortfolioItems, assetTypePortfolioItems = new(), profitsPortfolioItems = new();
    decimal totalValue, profit, totalTransactionCosts = 0, totalTaxesCosts = 0, percentage;
    bool isLoadedComplete = false;
    string test;
    protected override async Task OnInitializedAsync()
    {
        portfolios = await Http.GetFromJsonAsync<IEnumerable<Portfolio>>("Portfolio");
        portfoliohistories = await Http.GetFromJsonAsync<IEnumerable<PortfolioHistory>>("Portfolio/PortfolioHistory");
        totalValue = portfolios.Sum(x => x.TotalValue);
        totalTransactionCosts = await Http.GetFromJsonAsync<decimal>("Transaction/TotalTransactionCosts");
        totalTaxesCosts = await Http.GetFromJsonAsync<decimal>("Transaction/TotalTaxes");
        profit = portfolios.Sum(x => x.Profit);

        piePortfolioItems = portfolios.Select(x => new PiePortfolioItem
            {
                Name = x.Asset.Name,
                SymbolName = x.Asset.SymbolForApi,
                Percentage = x.TotalValue / totalValue * 100
            }).ToList();

        var portfoliosGroupedByType = portfolios.ToList().GroupBy(x => x.Asset.AssetType).ToList();

        foreach (var portfolioGroupedByType in portfoliosGroupedByType)
        {
            assetTypePortfolioItems.Add(
                new PiePortfolioItem
                    {
                        Name = portfolioGroupedByType.First().Asset.AssetType.ToString(),
                        Percentage = portfolioGroupedByType.Sum(x => x.TotalValue) / totalValue * 100
                    });
        }

        profitsPortfolioItems.Add(new PiePortfolioItem
            {
                Name = "Total Invested",
                Percentage =  portfolios.Sum(x=>x.TotalInvestedValue)  / totalValue *100 
            });

        profitsPortfolioItems.Add(new PiePortfolioItem
            {
                Name = "Total Profit",
                Percentage = profit / totalValue *100 
            });

        FilterPortfolioHistory(DateTime.Now.AddYears(-20));
        isLoadedComplete = true;
    }

    bool smooth = true;
    class DataItem
    {
        public DateTime Date { get; set; }
        public double Revenue { get; set; }
        public double Profit { get; set; }
    }

    class PiePortfolioItem
    {
        public string SymbolName { get; set; }
        public string Name { get; set; }
        public decimal Percentage { get; set; }
    }

    string FormatAsEuro(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("nl-NL"));
    }
    void btnTest() { }

    void FilterPortfolioHistory(DateTime filterDate)
    {
        totalInvestedValue = portfoliohistories.Where(x => x.Date >= filterDate).Select(x => new DataItem
            {
                Date = x.Date,
                Revenue = Convert.ToDouble(x.TotalInvestedPortfolioValue),
                Profit = Convert.ToDouble(x.Profit)
            }).ToList();

        totalPortfolioValue = portfoliohistories.Where(x => x.Date >= filterDate).Select(x => new DataItem
            {
                Date = x.Date,
                Revenue = Convert.ToDouble(x.TotalPortfolioValue),
                Profit = Convert.ToDouble(x.Profit)

            }).ToList();
    }

    void OnClick(string buttonName)
    {
        // do nothing
    }

}